{
  "swagger": "2.0",
  "info": {
    "description": "This is an asset portfolio server\n",
    "version": "1.0.0",
    "title": "Asset Portfolio",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "apiteam@swagger.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "virtserver.swaggerhub.com",
  "basePath": "/jibarrad/asset-portfolio/1.0.0",
  "tags": [
    {
      "name": "asset",
      "description": "assets owned by the user"
    },
    {
      "name": "asset_type",
      "description": "types of assets created by the user"
    },
    {
      "name": "user",
      "description": "Operations about user"
    }
  ],
  "schemes": [
    "https",
    "http"
  ],
  "paths": {
    "/asset": {
      "get": {
        "tags": [
          "asset"
        ],
        "summary": "get all assets",
        "description": "Returns all assets",
        "operationId": "getAssets",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Asset"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Asset not found"
          }
        }
      },
      "post": {
        "tags": [
          "asset"
        ],
        "summary": "Add a new asset to the portfolio",
        "operationId": "addAsset",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Asset object that needs to be added to the portfolio",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Asset"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/asset/{assetId}": {
      "get": {
        "tags": [
          "asset"
        ],
        "summary": "Find asset by ID",
        "description": "Returns a single asset",
        "operationId": "getAssetById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "assetId",
            "in": "path",
            "description": "ID of asset to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Asset"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Asset not found"
          }
        }
      },
      "put": {
        "tags": [
          "asset"
        ],
        "summary": "Update an existing asset",
        "operationId": "updateAsset",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "assetId",
            "in": "path",
            "description": "Asset id to delete",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Asset object that needs to be updated in the portfolio",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Asset"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Asset not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "asset"
        ],
        "summary": "Deletes an asset",
        "operationId": "deleteAsset",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "assetId",
            "in": "path",
            "description": "Asset id to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Asset not found"
          }
        }
      }
    },
    "/asset_type": {
      "get": {
        "tags": [
          "asset_type"
        ],
        "summary": "get all asset types",
        "description": "Returns all asset types",
        "operationId": "getAssetTypes",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Asset_Type"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Asset Type not found"
          }
        }
      },
      "post": {
        "tags": [
          "asset_type"
        ],
        "summary": "Add a new asset type to the portfolio",
        "operationId": "addAssetType",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "AssetType object that needs to be added to the portfolio",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Asset_Type"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/asset_type/{assetTypeId}": {
      "get": {
        "tags": [
          "asset_type"
        ],
        "summary": "Find asset type by ID",
        "description": "Returns a single asset type",
        "operationId": "getAssetTypeById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "assetTypeId",
            "in": "path",
            "description": "ID of asset type to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Asset_Type"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Asset Type not found"
          }
        }
      },
      "put": {
        "tags": [
          "asset_type"
        ],
        "summary": "Update an existing asset type",
        "operationId": "updateAssetType",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "assetTypeId",
            "in": "path",
            "description": "Asset Type id to delete",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Asset Type object that needs to be updated in the portfolio",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Asset_Type"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Asset Type not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "asset_type"
        ],
        "summary": "Deletes an asset type",
        "operationId": "deleteAssetType",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "assetTypeId",
            "in": "path",
            "description": "Asset Type id to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Asset not found"
          }
        }
      }
    },
    "/user": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create user",
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/login": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Logs user into the system",
        "operationId": "loginUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "The user name for login",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for login in clear text",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {
              "X-Rate-Limit": {
                "type": "integer",
                "format": "int32",
                "description": "calls per hour allowed by the user"
              },
              "X-Expires-After": {
                "type": "string",
                "format": "date-time",
                "description": "date in UTC when token expires"
              }
            },
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    },
    "/user/logout": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Logs out current logged in user session",
        "operationId": "logoutUser",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/{userId}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user by user name",
        "operationId": "getUserByName",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The name that needs to be fetched. Use user1 for testing.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Updated user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "id of the user that needs to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid user supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete user",
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The name that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    }
  },
  "definitions": {
    "Asset_Type": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/User"
        },
        "name": {
          "type": "string"
        },
        "target_percentage": {
          "type": "number"
        },
        "target_threshold": {
          "type": "number"
        }
      },
      "xml": {
        "name": "Asset_Type"
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      },
      "xml": {
        "name": "User"
      }
    },
    "Asset": {
      "type": "object",
      "required": [
        "name",
        "user",
        "value"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/User"
        },
        "asset_type": {
          "$ref": "#/definitions/Asset_Type"
        },
        "name": {
          "type": "string",
          "example": "profuturo"
        },
        "value": {
          "type": "number"
        }
      },
      "xml": {
        "name": "asset"
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}